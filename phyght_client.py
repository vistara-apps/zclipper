#!/usr/bin/env python3
"""
Phyght Platform Client for ZClipper
Uses the existing Phyght API as customers to upload clips
"""

import os
import asyncio
import aiohttp
import aiofiles
from pathlib import Path
from typing import Dict, Any, Optional
import logging
import json
from datetime import datetime

logger = logging.getLogger(__name__)

class PhyghtClient:
    """Client to upload zclipper clips to Phyght platform as customers"""
    
    def __init__(self, phyght_url: str = None):
        # Use the deployed Phyght platform URL or local development
        self.phyght_url = phyght_url or os.getenv('PHYGHT_PLATFORM_URL', 'https://your-phyght-app.vercel.app')
        self.upload_endpoint = f"{self.phyght_url}/functions/v1/gcp-upload"
        self.videos_endpoint = f"{self.phyght_url}/functions/v1/videos-upload"
        
        # Phyght API key (if we become paid customers)
        self.api_key = os.getenv('PHYGHT_API_KEY', 'demo-customer-key')
        
        logger.info(f"PhyghtClient initialized with URL: {self.phyght_url}")
    
    async def upload_zclipper_clip(self, clip_path: Path, thumbnail_path: Path, 
                                 clip_metadata: Dict[str, Any]) -> Dict[str, Any]:
        """
        Upload zclipper clip to Phyght platform as a customer
        
        Args:
            clip_path: Path to the video clip
            thumbnail_path: Path to thumbnail image
            clip_metadata: Metadata about the clip (channel, viral_score, etc.)
            
        Returns:
            Dict with upload results
        """
        try:
            logger.info(f"Uploading clip to Phyght platform: {clip_path.name}")
            
            # Prepare metadata for Phyght platform
            phyght_metadata = {
                "title": f"ðŸ”¥ Explosive Moment - {clip_metadata.get('channel', 'Unknown')}",
                "description": f"Auto-generated by ZClipper - {clip_metadata.get('chat_velocity', 0)} msgs/sec viral moment",
                "category": "explosive-moments",
                "type": "zclipper-auto",
                "tags": ["zclipper", "explosive", "moments", "auto-generated"],
                "source": "zclipper",
                "zclipper_data": {
                    "channel": clip_metadata.get('channel'),
                    "chat_velocity": clip_metadata.get('chat_velocity', 0),
                    "viral_score": clip_metadata.get('viral_score', 0),
                    "viral_messages": clip_metadata.get('viral_messages', []),
                    "session_id": clip_metadata.get('session_id'),
                    "user_id": clip_metadata.get('user_id'),
                    "created_at": datetime.now().isoformat()
                }
            }
            
            # Create multipart form data
            async with aiohttp.ClientSession() as session:
                data = aiohttp.FormData()
                
                # Add video file
                async with aiofiles.open(clip_path, 'rb') as video_file:
                    video_content = await video_file.read()
                    data.add_field('video', video_content, 
                                 filename=clip_path.name, 
                                 content_type='video/mp4')
                
                # Add thumbnail if available
                if thumbnail_path and thumbnail_path.exists():
                    async with aiofiles.open(thumbnail_path, 'rb') as thumb_file:
                        thumb_content = await thumb_file.read()
                        data.add_field('thumbnail', thumb_content,
                                     filename=thumbnail_path.name,
                                     content_type='image/jpeg')
                
                # Add metadata
                data.add_field('metadata', json.dumps(phyght_metadata))
                
                # Headers for Phyght API
                headers = {
                    'Authorization': f'Bearer {self.api_key}',
                    'X-Client-Info': 'zclipper-customer'
                }
                
                # Upload to Phyght platform
                async with session.post(self.upload_endpoint, data=data, headers=headers) as response:
                    if response.status == 200:
                        result = await response.json()
                        
                        logger.info(f"âœ… Successfully uploaded to Phyght: {result.get('video', {}).get('id')}")
                        
                        return {
                            'success': True,
                            'platform': 'phyght',
                            'video_id': result.get('video', {}).get('id'),
                            'video_url': result.get('video', {}).get('videoUrl'),
                            'thumbnail_url': result.get('video', {}).get('thumbnailUrl'),
                            'file_name': result.get('video', {}).get('fileName'),
                            'storage_provider': result.get('video', {}).get('storageProvider', 'supabase'),
                            'upload_metadata': result.get('video', {}),
                            'phyght_response': result
                        }
                    else:
                        error_text = await response.text()
                        logger.error(f"Phyght upload failed: {response.status} - {error_text}")
                        
                        return {
                            'success': False,
                            'error': f"HTTP {response.status}: {error_text}",
                            'status_code': response.status
                        }
                        
        except Exception as e:
            logger.error(f"Error uploading to Phyght: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    async def create_video_record_first(self, clip_metadata: Dict[str, Any]) -> Optional[str]:
        """Create video record first, then upload file (alternative method)"""
        try:
            # This would use the videos-upload endpoint which requires creating a record first
            # For now, we'll use the simpler gcp-upload endpoint
            return None
            
        except Exception as e:
            logger.error(f"Error creating video record: {e}")
            return None
    
    async def get_user_videos(self, user_id: str) -> list:
        """Get user's videos from Phyght platform"""
        try:
            async with aiohttp.ClientSession() as session:
                headers = {
                    'Authorization': f'Bearer {self.api_key}',
                    'apikey': self.api_key
                }
                
                # Query videos with ZClipper source
                params = {
                    'select': '*',
                    'metadata->>source': 'eq.zclipper',
                    'limit': 50,
                    'order': 'created_at.desc'
                }
                
                videos_api = f"{self.phyght_url}/rest/v1/videos"
                
                async with session.get(videos_api, headers=headers, params=params) as response:
                    if response.status == 200:
                        videos = await response.json()
                        return videos
                    else:
                        logger.error(f"Failed to fetch videos: {response.status}")
                        return []
                        
        except Exception as e:
            logger.error(f"Error fetching user videos: {e}")
            return []
    
    def get_platform_url(self) -> str:
        """Get the platform URL for users to view their clips"""
        return self.phyght_url
    
    def get_clip_public_url(self, video_id: str) -> str:
        """Get direct link to view clip on Phyght platform"""
        return f"{self.phyght_url}/video/{video_id}"

# Global client instance
phyght_client = PhyghtClient()